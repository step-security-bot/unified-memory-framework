name: BasicBuilds

on: workflow_call

env:
  BUILD_DIR : "${{github.workspace}}/build/"
  INSTL_DIR : "${{github.workspace}}/build/install-dir"

jobs:
  icx-build:
    name: Build - Intel C++ Compiler
    strategy:
      matrix:
        build_type: [Debug, Release]
        compiler: [{c: icx, cxx: icpx}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        os_provider: ['ON']
        sanitizers: [{asan: OFF, ubsan: OFF, tsan: OFF}]
    runs-on: ubuntu-22.04
    container:
      image: intel/oneapi:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
      options: "--privileged"

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Install apt packages
      run: |
        apt-get update
        apt-get install -y libnuma-dev libjemalloc-dev libtbb-dev libhwloc-dev

    - name: Configure build
      run: >
        cmake
        -B build
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_OS_MEMORY_PROVIDER=${{matrix.os_provider}}
        -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_BUILD_LIBUMF_POOL_SCALABLE=ON
        -DUSE_ASAN=${{matrix.sanitizers.asan}}
        -DUSE_UBSAN=${{matrix.sanitizers.ubsan}}
        -DUSE_TSAN=${{matrix.sanitizers.tsan}}

    - name: Build UMF
      run: |
        cmake --build build -j $(nproc)

    - name: Run tests
      working-directory: ${{github.workspace}}/build
      run: |
        ctest --output-on-failure

    - name: Test make install
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_install.sh \
            ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}} ${{matrix.build_type}} ${{matrix.shared_library}}

    - name: Test make uninstall
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_uninstall.sh ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}}

  ubuntu-build:
    name: Build - Ubuntu
    strategy:
      matrix:
        os: ['ubuntu-20.04', 'ubuntu-22.04']
        build_type: [Debug, Release]
        compiler: [{c: gcc, cxx: g++}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        os_provider: ['ON']
        sanitizers: [{asan: OFF, ubsan: OFF, tsan: OFF}]
        include:
          - os: 'ubuntu-20.04'
            build_type: Release
            compiler: {c: gcc-7, cxx: g++-7}
            shared_library: 'OFF'
            os_provider: 'ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: clang, cxx: clang++}
            shared_library: 'OFF'
            os_provider: 'ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            os_provider: 'ON'
          # test os_provider='OFF' with shared_library='ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            os_provider: 'OFF'
          # test os_provider='OFF' with shared_library='OFF'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'OFF'
            os_provider: 'OFF'
          # TODO: Move jobs with sanitizer checks to a separate workflow file.
          - os: 'ubuntu-22.04'
            build_type: Debug
            compiler: {c: clang, cxx: clang++}
            pool_tracking: 'ON'
            shared_library: 'OFF'
            os_provider: 'ON'
          # TSAN is mutually exclusive with other sanitizers
            sanitizers: {asan: ON, ubsan: ON, tsan: OFF}
          - os: 'ubuntu-22.04'
            build_type: Debug
            compiler: {c: clang, cxx: clang++}
            pool_tracking: 'ON'
            shared_library: 'OFF'
            os_provider: 'ON'
            sanitizers: {asan: OFF, ubsan: OFF, tsan: ON}
          - os: 'ubuntu-22.04'
            build_type: Debug
            compiler: {c: gcc, cxx: g++}
            pool_tracking: 'ON'
            shared_library: 'OFF'
            os_provider: 'ON'
            sanitizers: {asan: ON, ubsan: ON, tsan: OFF}
          - os: 'ubuntu-22.04'
            build_type: Debug
            compiler: {c: gcc, cxx: g++}
            pool_tracking: 'ON'
            shared_library: 'OFF'
            os_provider: 'ON'
            sanitizers: {asan: OFF, ubsan: OFF, tsan: ON}
    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install apt packages
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libhwloc-dev libnuma-dev libjemalloc-dev libtbb-dev

      - name: Install g++-7
        if: matrix.compiler.cxx == 'g++-7'
        run: |
          sudo apt-get install -y ${{matrix.compiler.cxx}}

      - name: Configure build
        run: >
          cmake
          -B ${{env.BUILD_DIR}}
          -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
          -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
          -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
          -DUMF_BUILD_OS_MEMORY_PROVIDER=${{matrix.os_provider}}
          -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
          -DUMF_FORMAT_CODE_STYLE=OFF
          -DUMF_DEVELOPER_MODE=ON
          -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
          -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
          -DUMF_BUILD_LIBUMF_POOL_SCALABLE=ON
          -DUSE_ASAN=${{matrix.sanitizers.asan}}
          -DUSE_UBSAN=${{matrix.sanitizers.ubsan}}
          -DUSE_TSAN=${{matrix.sanitizers.tsan}}

      - name: Build UMF
        run: |
          cmake --build ${{env.BUILD_DIR}} -j $(nproc)

      - name: Run tests
        working-directory: ${{env.BUILD_DIR}}
        run: |
          ctest --output-on-failure

      - name: Test make install
        working-directory: ${{env.BUILD_DIR}}
        run: ${{github.workspace}}/test/test_make_install.sh \
              ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}} ${{matrix.build_type}} ${{matrix.shared_library}}

      - name: Test make uninstall
        working-directory: ${{env.BUILD_DIR}}
        run: ${{github.workspace}}/test/test_make_uninstall.sh ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}}

  windows-build:
    name: Build - Windows
    strategy:
      matrix:
        os: ['windows-2019', 'windows-2022']
        build_type: [Debug, Release]
        compiler: [{c: cl, cxx: cl}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        sanitizers: [{asan: OFF}]
        include:
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: clang-cl, cxx: clang-cl}
            pool_tracking: 'ON'
            toolset: "-T ClangCL"
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            pool_tracking: 'ON'
            shared_library: 'ON'
          - os: 'windows-2022'
            build_type: Debug
            compiler: {c: cl, cxx: cl}
            pool_tracking: 'OFF'
            shared_library: 'OFF'
            sanitizers: {asan: ON}
          - os: 'windows-2022'
            build_type: Debug
            compiler: {c: clang-cl, cxx: clang-cl}
            pool_tracking: 'OFF'
            shared_library: 'OFF'
            sanitizers: {asan: ON}

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      # Use '14.38.33130' MSVC toolset when compiling UMF with ASan.
      # Running binaries compiled with older toolsets results in a
      # 'STATUS_DLL_INIT_FAILED' error despite being linked with ASan from
      # the same toolset as the compiler being used.
      # https://github.com/actions/runner-images/issues/8891
      - name: Setup MSVC dev command prompt
        if: matrix.os == 'windows-2022' && matrix.sanitizers.asan == 'ON'
        uses: TheMrMilchmann/setup-msvc-dev@48edcef51a12c80d7e62ace57aae1417795e511c # v3.0.0
        with:
          arch: x64
          toolset: 14.38.33130

      - name: Configure build
        run: >
          cmake
          -B ${{env.BUILD_DIR}}
          ${{matrix.toolset}}
          -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
          -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
          -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
          -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
          -DUMF_FORMAT_CODE_STYLE=OFF
          -DUMF_DEVELOPER_MODE=ON
          -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
          -DUSE_ASAN=${{matrix.sanitizers.asan}}

      - name: Build UMF
        run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        run: ctest -C ${{matrix.build_type}} --output-on-failure

  macos-build:
    name: Build - MacOS
    strategy:
        matrix:
          os: ['macos-12', 'macos-13']
    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install Python requirements
        run: python3 -m pip install -r third_party/requirements.txt

      - name: Configure build
        run: >
          cmake
          -B ${{env.BUILD_DIR}}
          -DCMAKE_BUILD_TYPE=Release
          -DUMF_FORMAT_CODE_STYLE=OFF
          -DUMF_DEVELOPER_MODE=ON
          -DUMF_ENABLE_POOL_TRACKING=ON

      - name: Build UMF
        run: |
          cmake --build ${{env.BUILD_DIR}} -j $(sysctl -n hw.logicalcpu)
